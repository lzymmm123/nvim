# vim: set fenc=utf-8 ft=dosini:



[c++17]
command:cpp=g++ "$(VIM_FILEPATH)" -std=c++17 -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
[c++20]
command:cpp=g++ "$(VIM_FILEPATH)" -std=c++20 -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
[c++17-with-opencv]
command:cpp=g++ "$(VIM_FILEPATH)" -std=c++17 `pkg-config opencv4 -cflags -libs` -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
[c++17-with-opencv-and-extra-file]
command:cpp=g++ "$(VIM_FILEPATH)" $(?prompt:) -std=c++17 `pkg-config opencv4 -cflags -libs` -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
# define a new task named "file-build"
[file-build]


# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros

command:cpp=g++ "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
command:c=gcc "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
command:make=make -f "$(VIM_FILEPATH)"
command:typescript=tsc "$(VIM_FILEPATH)"

# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_FILEDIR)

# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m

# save file before execute
save=2

[file-run]
command="$(VIM_FILEPATH)"
command:c,cpp="$(VIM_PATHNOEXT)"
command:go="$(VIM_PATHNOEXT)"
command:python=python "$(VIM_FILENAME)"
command:javascript=node "$(VIM_FILENAME)"
command:sh=sh "$(VIM_FILENAME)"
command:bash=sh "$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
command:perl=perl "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
command:typescript=node "$(VIM_PATHNOEXT).js"
output=terminal
cwd=$(VIM_FILEDIR)
save=2


[project-build]
command:cmake=cmake ..
cwd=$(VIM_ROOT)/build

[project-run]
command=make
# <root> 是 $(VIM_ROOT) 的别名，写起来容易些
cwd=<root>/build
output=terminal


[grep]
command=rg -n --no-heading --color never "$(?keyword)" "<root>" -tcpp -tc -tpy -tvim -tgo -tasm
cwd=$(VIM_ROOT)
errorformat=%f:%l:%m
